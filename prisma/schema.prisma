// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id           String   @id @default(cuid())
  name         String
  users        User[]
  teams        Team[]
  jobs         Job[]
  country      String
  street       String
  city         String
  postCode     String
  subscription Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  accounts      Account[]
  sessions      Session[]
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?
  teams         Team[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Team {
  id               String        @id @default(cuid())
  name             String
  street           String
  city             String
  postCode         String
  contactFirstName String
  contactLastName  String
  description      String
  jobs             Job[]
  users            User[]
  Company          Company?      @relation(fields: [companyId], references: [id])
  companyId        String?
  applications     Application[]
  slug             String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Job {
  id          String        @id @default(cuid())
  name        String
  companyId   String?
  Team        Team?         @relation(fields: [teamId], references: [id])
  teamId      String?
  Company     Company?      @relation(fields: [companyId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String?
  Application Application[]
  type        String
  mail        String
  speech      String
  briefing    String        @db.VarChar(800)
  benefits    String        @db.VarChar(800)
}

model Application {
  id     String  @id @default(cuid())
  job    Job     @relation(fields: [jobId], references: [id])
  jobId  String
  data   Json
  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?
}
